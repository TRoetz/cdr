{
  "name": "insubnet",
  "version": "0.0.8",
  "homepage": "http://louist.github.io/inSubnet/",
  "author": {
    "name": "Louis T.",
    "email": "louist@ltdev.im",
    "url": "http://ltdev.im/"
  },
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/LouisT/inSubnet.git"
  },
  "bugs": {
    "url": "https://github.com/LouisT/inSubnet/issues"
  },
  "licenses": [
    {
      "type": "unlicensed",
      "url": "http://unlicense.org/"
    }
  ],
  "keywords": [
    "ip",
    "ipv4",
    "ipv6",
    "subnet",
    "expander",
    "validation"
  ],
  "description": "Check an IP(v4 or v6) against a subnet.",
  "engine": "node => 0.6",
  "main": "index.js",
  "readme": "inSubnet (v0.0.8)\n======\n\nInstall: npm install [insubnet](https://npmjs.org/package/insubnet \"Title\")\n\nThis project is [Unlicensed](http://unlicense.org/ \"Title\").\nIn other words, I don't care what you do with it.\nHowever, if you make something interesting, I would like to check it out.\nI'm also accepting pull requests.\n\n[![Build Status](https://travis-ci.org/LouisT/inSubnet.png?branch=master)](https://travis-ci.org/LouisT/inSubnet)\n\nBrowser example at [http://louist.github.io/inSubnet/example.html](http://louist.github.io/inSubnet/example.html \"Title\").\n\n[IPv4 Address Notation Support](http://en.wikipedia.org/wiki/IPv4#Address_representations \"Title\"): \n------\n- [x] Dotted decimal (127.0.0.1)\n- [ ] Dotted hexadecimal (0xC0.0x00.0x02.0xEB)\n- [ ] Dotted octal (0301.0250.0002.0353)\n- [ ] Hexadecimal (0xC00002EB)\n- [x] Decimal (3221226219)\n- [ ] Octal (030000001353)\n\nFunctions:\n------\n    Examples in `./examples/` folder.\n\n    inSubnet.Auto(ip, subnet[, prefix length]) - Check to find out if <ip> is in <subnet>. Works with IPv4 and IPv6. Returns boolean.\n\n         Examples: inSubnet.Auto('1.2.3.4','1.2.0.0/16'); // true\n                   inSubnet.Auto('1.2.3.4','1.2.0.0','16'); // true\n                   inSubnet.Auto('16909060','1.2.0.0/16'); // true\n                   inSubnet.Auto('16909060','16908288/16'); // true\n                   inSubnet.Auto('2400:cb00::123','2400:cb00::/32'); // true\n                   inSubnet.Auto('1.4.3.4','1.2.0.0','16'); // false\n\n    inSubnet.IPv4(ip, subnet[, prefix length]) - Same as \"Auto()\" but for IPv4 only. - Returns boolean.\n\n         Examples: See \"Auto()\" examples.\n\n    inSubnet.IPv4Dec(decimal, subnet[, prefix length]) - Same as \"Auto()\" but for IPv4 only. - Returns boolean.\n\n         Examples: See \"Auto()\" examples.\n\n\n    inSubnet.IPv6(ip, subnet[, prefix length]) - Same as \"Auto()\" but for IPv6 only. - Returns boolean.\n\n         Examples: inSubnet.IPv6('2400:cb00::123','2400:cb00::/32'); // true\n                   inSubnet.IPv6('2400:cb00::123','2400:cb00::','32'); // true\n                   inSubnet.IPv6('2500:cb00::123','2400:cb00::','32'); // false\n\n    inSubnet.isIP(string) - Check if <string> is an IP address. Works for IPv6 and IPv4. - Returns boolean.\n\n         Examples: inSubnet.isIP(\"127.0.0.1\"); // true\n                   inSubnet.isIP(\"afd::1\"); // true\n                   inSubnet.isIP(\"asd::1\"); // false\n \n    inSubnet.isIPv4(string) - Same as \"isIP()\" but for IPv4 only. - Returns boolean.\n         Examples: inSubnet.isIPv4(\"127.0.0.1\"); // true\n                   inSubnet.isIPv4(\"127.0.0.256\"); // false\n\n    inSubnet.isDecimal(string) - Same as \"isIP()\" but for IPv4 decimal notation only. - Returns boolean.\n         Examples: inSubnet.isDecimal(\"16909060\"); // true\n                   inSubnet.isDecimal(\"a16909060\"); // false\n\n    inSubnet.isIPv6(string) - Same as \"isIP()\" but for IPv6 only. - Returns boolean.\n\n         Examples: inSubnet.isIPv6(\"adf::1\"); // true\n                   inSubnet.isIPv6(\"asf::1\"); // false\n\n    inSubnet.Expand(ipv6[, zero]) - Expands an IPv6.\n                                    If <zero> is true, use single zeros. - Returns IPv6 or false.\n\n         Examples: inSubnet.Expand(\"afd::1\"); // 0afd:0000:0000:0000:0000:0000:0000:0001\n                   inSubnet.Expand(\"2001:4860:4860::8888\"); // 2001:4860:4860:0000:0000:0000:0000:8888\n                   inSubnet.Expand(\"afd::1\",true); // afd:0:0:0:0:0:0:1\n                   inSubnet.Expand(\"asd::1\"); // false\n\n    inSubnet.Validate(ip[, subnets[, no update]]) - Check <ip> or an Array of IPs against an array of subnets set by \"setSubnets()\".\n                                       If <subnets> is passed, uses \"setSubnets()\". If <no update> is true, do not call \"setSubnets()\".\n                                       Returns boolean or an Array of boolean.\n\n         Examples: inSubnet.Validate('127.0.0.1',['127.0.0.1/32','adf::1/32']);  // true\n                   inSubnet.Validate('2130706433'); // true - Uses previously set subnets.\n                   inSubnet.Validate(['127.0.0.1','127.0.0.2','adf::1']); // [true,false,true] - Uses previously set subnets.\n                   inSubnet.Validate(['127.0.0.1','127.0.0.2','adf::1'],['127.0.0.1/32']); // [true,false,false] - Overwrite previously set subnets.\n\n    *inSubnet.Filter(array[, subnets[, no update]]) - Filter an Array of IP addresses against subnets set with \"setSubnets()\".\n                                        If <subnets> is passed, uses \"setSubnets()\". If <no update> is true, do not call \"setSubnets()\".\n                                        Returns IP or false, Array of valid IPs.\n\n         Examples: inSubnet.Filter(['127.0.0.1','adf::1','127.0.0.2'],['127.0.0.1/32','adf::1/32']); // ['127.0.0.1','adf::1']\n                   inSubnet.Filter('127.0.0.1',['127.0.0.1/32','adf::1/32']); // 127.0.0.1\n                   inSubnet.Filter('adf::1',['127.0.0.1/32'],true); // true - Uses previously set subnets.\n                   inSubnet.Filter('adf::1',['127.0.0.1/32']); // false - Overwrite previously set subnets.\n                   inSubnet.Filter('127.0.0.2',['127.0.0.1/32','adf::1/32']); // false\n\n    *inSubnet.Clean(array[, filter[, sort]]) - Filter an array of IPs/subnets and return only valid IPs. Used in \"setSubnets()\".\n                                              <filter> is the function to pass to \"Array.filter()\".\n                                              <sort> is the function to pass to \"Array.sort()\" - Returns Object or false.\n                                              NOTE: \"Array.filter()\" and \"Array.sort()\" are ran LAST after validating and expanding.\n\n         Examples: inSubnet.Clean(['127.0.0.2','127.0.0.29/32']); // {ipv4:['127.0.0.2','127.0.0.29/32'],ipv6:[]}\n                   inSubnet.Clean(['127.0.0.1','adf::1']); // {ipv4:['127.0.0.1'],ipv6:['0adf:0000:0000:0000:0000:0000:0000:0001']}\n                   inSubnet.Clean(['adf::1','::1']); // {ipv4:[],ipv6:['0000:0000:0000:0000:0000:0000:0000:0001','0adf:0000:0000:0000:0000:0000:0000:0001']}\n                   inSubnet.Clean(['not an IP','subnet/23','asd::1']); // false\n\n    *inSubnet.setSubnets(subnets) - Set a list of subnets for \"Validate()\" and \"Filter()\".\n                                   WARNING: Overrides all previous \"setSubnets()\" calls. - Returns boolean.\n\n         Examples: inSubnet.setSubnets([\"192.168.1.0/30\",\"::1/32\"]); // true\n                   inSubnet.setSubnets([\"not\",\"subnets\",\"subnet/32\"]); // false\n\n    *Only supports IPv4 dotted decimal notation and IPv6.\n\nTODO:\n------\n- [x] Figure out what should be in the TODO and then write it! (Done!?)\n- [ ] Write a better README! (Is this happening?)\n- [x] Write a simple HTTP example for CloudFlare. (Look in ./examples/cloudflare.js)\n- [ ] Make \"Exporter\" better.\n\nFunctionality Requests:\n------\n- [ ] *Add support for IPv6 dotted notation. (::127.0.0.1)\n- [ ] Add support for more IPv4 notations. See \"IPv4 Address Notation Support\" above.\n\n    *I probably wont get to this any time soon... Sorry for those who need/want it. Please feel free to submit a pull request.\n",
  "readmeFilename": "README.md",
  "_id": "insubnet@0.0.8",
  "dist": {
    "shasum": "76ed95180a4396bd973ca69b148fa71b1e87f1f5"
  },
  "_from": "insubnet@",
  "_resolved": "https://registry.npmjs.org/insubnet/-/insubnet-0.0.8.tgz"
}
