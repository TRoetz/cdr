{
  "name": "express-ipfilter",
  "description": "A light-weight IP address based filtering system",
  "version": "0.0.17",
  "author": {
    "name": "BaM Interactive"
  },
  "dependencies": {
    "netmask": "~1.0.4",
    "ip": "~0.3.0",
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "mocha": "~1.4.2"
  },
  "keywords": [
    "middleware",
    "ipfilter",
    "ip filter",
    "ipban",
    "ip ban",
    "express"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/baminteractive/node-ipfilter.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha -R spec"
  },
  "license": "MIT",
  "readme": "IP Filter: A light-weight IP address based filtering system\n=================================================================================\n\nThis package provides easy IP based access control. This can be achieved either by blacklisting certain IPs and whitelisting all others, or whitelisting certain IPs and blacklisting all others.\n\n[![Build Status](https://secure.travis-ci.org/baminteractive/node-ipfilter.png?branch=master)](http://travis-ci.org/baminteractive/node-ipfilter)\n\n## Version\n0.0.17\n\n## Installation\n\nRecommended installation is with npm. To add node-ipfilter to your project, do:\n\n    npm install express-ipfilter\n\n## Usage with Express\n\nBlacklisting certain IP addresses, while allowing all other IPs:\n\n```javascript\n// Init dependencies\nvar express = require('express')\n    , ipfilter = require('ipfilter')\n    , app = express.createServer()\n    ;\n\n// Blacklist the following IPs\nvar ips = ['127.0.0.1'];\n\n// Create the server\napp.use(ipfilter(ips));\napp.listen(3000);\n```\n\nWhitelisting certain IP addresses, while denying all other IPs:\n\n```javascript\n// Init dependencies\nvar express = require('express')\n    , ipfilter = require('ipfilter')\n    , app = express.createServer()\n    ;\n\n// Blacklist the following IPs\nvar ips = ['127.0.0.1'];\n\n// Create the server\napp.use(ipfilter(ips, {mode: 'allow'}));\napp.listen(3000);\n```\n\nUsing CIDR subnet masks for ranges:\n\n```javascript\nvar ips = ['127.0.0.1/24'];\n\n// Create the server\napp.use(ipfilter(ips, {mode: 'allow'}));\napp.listen(3000);\n```\n\nUsing IP ranges:\n\n```javascript\nvar ips = [['127.0.0.1','127.0.0.10']];\n\n// Create the server\napp.use(ipfilter(ips, {mode: 'allow'}));\napp.listen(3000);\n```\n\n## Changelog\n\n0.0.16\n\n* Fixing bug when no IP address can be determined\n\n0.0.15\n\n* Minor bug fix\n\n0.0.14\n\n* Adding the ability to have exclusion urls\n\n0.0.12\n\n* Diagnostic Options\n\n0.0.11\n\n* Bug Fix for port logic\n\n0.0.10\n\n* Added support for IPs with port numbers\n\n0.0.9\n\n* Fixing deploy issues\n\n0.0.8\n\n* Auto deploys for npm\n\n0.0.7\n\n* Add support ip ranges.\n\n0.0.6\n\n* Fixed a bug when using console output\n\n0.0.5\n\n* Added ability to block by subnet mask (i.e. 127.0.0.1/24)\n* Added tests for cidr functionality\n\n0.0.4\n\n* Add tests\n* Update docs\n* Refactor, and restyle\n\n0.0.1\n\n* First revision\n\n## Credits\n\nBaM Interactive - [code.bamideas.com](http://code.bamideas.com)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/baminteractive/node-ipfilter/issues"
  },
  "_id": "express-ipfilter@0.0.17",
  "_from": "express-ipfilter@"
}
